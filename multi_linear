import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 数据集路径引入（自变量'出口货物', '零售', '就业情况', '科研投入', '高新企业数量'）
data_dir = os.path.join(os.getcwd(), 'data')
economy_exit_factor_dir = os.path.join(data_dir, '出口货物')
economy_retail_factor_dir = os.path.join(data_dir, '零售')
population_emolpyment_factor_dir = os.path.join(data_dir, '就业情况')
SciTech_sciinput_factor_dir = os.path.join(data_dir, '科研投入')
SciTech_scifirm_factor_dir = os.path.join(data_dir, '高新企业数量')

merged_data = pd.DataFrame({
    'Year',  # 年份数据
    'economy_exit_factor_dir',  #出口货物数据
    'economy_retail_factor_dir',  #零售数据
    'population_emolpyment_factor_dir',  #就业情况数据
    'SciTech_sciinput_factor_dir',  #科研投入数据
    'SciTech_scifirm_factor_dir',  #高新企业数量数据
    'GDP'  # GDP数据（目标变量）

# 选择自变量（特征）和因变量（目标）
X = merged_data[['Eco', 'Popu', 'Scitec']]  # 自变量（特征）
y = merged_data['GDP']  # 因变量（目标）

# 将数据转换为DataFrame格式（可选，但便于查看和处理）
columns = ['Feature1', 'Feature2', 'Feature3']
X_df = pd.DataFrame(X, columns=columns)
y_df = pd.Series(y, name='Target')

# 将数据集拆分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 创建线性回归模型并训练
model = LinearRegression()
model.fit(X_train, y_train)

# 使用模型进行预测
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# 评估模型性能
train_mse = mean_squared_error(y_train, y_pred_train)
test_mse = mean_squared_error(y_test, y_pred_test)
train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

print(f"训练集MSE: {train_mse}")
print(f"测试集MSE: {test_mse}")
print(f"训练集R^2: {train_r2}")
print(f"测试集R^2: {test_r2}")

# 输出模型的系数和截距
print(f"系数: {model.coef_}")
print(f"截距: {model.intercept_}")
